generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model account {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String   @db.VarChar(255)
  email      String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model platform {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description      String?            @db.VarChar(255)
  name             String             @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  user_id          String             @db.Uuid
  tenant_id        String             @db.VarChar(255)
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service_provider service_provider[]
}

model preferred_service_provider {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String           @db.Uuid
  service_provider_id String           @db.Uuid
  created_at          DateTime         @default(now()) @db.Timestamp(6)
  updated_at          DateTime         @default(now()) @db.Timestamp(6)
  service_provider    service_provider @relation(fields: [service_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                user             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model profile {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bio          String?  @db.VarChar(255)
  location     String?  @db.VarChar(255)
  website      String?  @db.VarChar(255)
  social_links String?  @db.VarChar(255)
  user_id      String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model service_provider {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                       String                       @db.VarChar(255)
  service_type               String                       @db.VarChar(255)
  description                String?                      @db.VarChar(255)
  platform_id                String                       @db.Uuid
  created_at                 DateTime                     @default(now()) @db.Timestamp(6)
  updated_at                 DateTime                     @default(now()) @db.Timestamp(6)
  preferred_service_provider preferred_service_provider[]
  platform                   platform                     @relation(fields: [platform_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                         String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                      String                       @unique @db.VarChar(255)
  firstName                  String?                      @db.VarChar(255)
  lastName                   String?                      @db.VarChar(255)
  roq_user_id                String                       @db.VarChar(255)
  tenant_id                  String                       @db.VarChar(255)
  created_at                 DateTime                     @default(now()) @db.Timestamp(6)
  updated_at                 DateTime                     @default(now()) @db.Timestamp(6)
  account                    account[]
  platform                   platform[]
  preferred_service_provider preferred_service_provider[]
  profile                    profile[]
}
